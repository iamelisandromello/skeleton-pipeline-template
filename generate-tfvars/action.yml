# 📄 generate-tvars.yml
# Action: Gera arquivo terraform.auto.tfvars.json com base em variáveis dinâmicas e segredos
# Objetivo: Gera arquivo terraform.auto.tfvars.json com base em variáveis dinâmicas e segredos
name: 'Generate tfvars'
description: 'Gera arquivo terraform.auto.tfvars.json com base em variáveis dinâmicas e segredos'

inputs:
  AWS_REGION:
    required: true
  PROJECT_NAME:
    required: true
  ENVIRONMENT:
    required: true
  GLOBAL_ENV_VARS_JSON:
    required: true
  ENVIRONMENTS:
    required: true
  aws_access_key_id:
    required: true
  aws_secret_access_key:
    required: true
  s3_bucket_name:
    required: true
  # NOVO INPUT: Para controlar a criação da SQS
  create_sqs_queue:
    description: "Define se a fila SQS deve ser criada (true/false)."
    required: true
    type: string # Receberá "true" ou "false" como string
    default: "true" # Mantém o comportamento padrão de criar se não for explicitamente definido

runs:
  using: "composite"
  steps:
    # 📊 Verificar o sucesso no recebimento das variáveis 
    - name: Debug variáveis de entrada na Generate tfvars
      shell: bash
      run: |
        echo "project_name=${{ inputs.PROJECT_NAME }}"
        echo "environment=${{ inputs.ENVIRONMENT }}"
        echo "s3_bucket_name=${{ inputs.s3_bucket_name }}"
        echo "aws_region=${{ inputs.AWS_REGION }}"
        echo "create_sqs_queue=${{ inputs.create_sqs_queue }}" 
        echo "---"

    # 🧾 Gerando arquivo de variáveis terraform
    - name: Gerar arquivo terraform.auto.tfvars.json
      shell: bash
      run: |
        set -e
        echo "Gerando terraform.auto.tfvars.json..."

        # Instala jq se não estiver presente (geralmente já está em runners ubuntu-latest)
        if ! command -v jq &> /dev/null
        then
            echo "jq não encontrado. Instalando..."
            sudo apt-get update && sudo apt-get install -y jq
        fi

        # Garante que o diretório 'terraform' exista antes de tentar escrever o arquivo
        mkdir -p terraform/

        # PRÉ-PROCESSAMENTO: Transforma inputs JSON complexos em strings JSON válidas
        # para serem passadas como argumentos para jq.
        # Utiliza `jq -sRr .` para "slurpar" toda a entrada crua como uma única string
        # e então 'fromjson' dentro do jq para parsear. Isso é a abordagem mais robusta
        # para inputs multi-linha de secrets.
        
        # O `printf '%s'` garante que a string de entrada seja passada de forma controlada.
        # O `jq -sRr .` lê toda a entrada (possivelmente multi-linha) como uma única string bruta,
        # e a transforma em um literal de string JSON, escapando aspas e novas linhas.

        environments_json_literal=$(printf '%s' "${{ inputs.ENVIRONMENTS }}" | jq -sRr '.')
        global_env_vars_json_literal=$(printf '%s' "${{ inputs.GLOBAL_ENV_VARS_JSON }}" | jq -sRr '.')

        # Debug desses literais para confirmar que são single-line e corretamente citados
        echo "Debug: environments_json_literal = $environments_json_literal"
        echo "Debug: global_env_vars_json_literal = $global_env_vars_json_literal"

        json_content=$(jq -n \
          --arg environments_val "$environments_json_literal" \
          --arg global_env_vars_val "$global_env_vars_json_literal" \
          --arg s3_bucket_name_val "${{ inputs.s3_bucket_name }}" \
          --arg aws_region_val "${{ inputs.AWS_REGION }}" \
          --arg project_name_val "${{ inputs.PROJECT_NAME }}" \
          --arg environment_val "${{ inputs.ENVIRONMENT }}" \
          --arg create_sqs_queue_str "${{ inputs.create_sqs_queue }}" \
          '{
            environments: ($environments_val | fromjson),
            global_env_vars: ($global_env_vars_val | fromjson),
            s3_bucket_name: $s3_bucket_name_val,
            aws_region: $aws_region_val,
            project_name: $project_name_val,
            environment: $environment_val,
            create_sqs_queue: ($create_sqs_queue_str | if . == "true" then true else false end)
          }')

        echo "$json_content" > terraform/terraform.auto.tfvars.json

        echo "✅ terraform.auto.tfvars.json gerado com sucesso!"
    
    # 🕵️‍♀️ Debug do arquivo gerado
    - name: Debug - Conteúdo de terraform.auto.tfvars.json (APÓS GERAÇÃO)
      shell: bash
      run: |
        echo "📄 Conteúdo final de terraform/terraform.auto.tfvars.json:"
        cat terraform/terraform.auto.tfvars.json || echo "❌ terraform.auto.tfvars.json não encontrado."
        echo "---"

    # 🗂️ Validando acesso ao repositório na AWS
    - name: Verificar acesso ao bucket S3
      shell: bash
      run: aws s3 ls s3://${{ inputs.s3_bucket_name }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

    # 🛡️ Validando credenciais de acesso a AWS
    - name: Validar credenciais AWS (STS)
      shell: bash
      run: aws sts get-caller-identity
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

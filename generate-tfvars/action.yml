# üìÑ generate-tvars.yml
# Action: Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos
# Objetivo: Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos
name: 'Generate tfvars'
description: 'Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos'

inputs:
  AWS_REGION:
    required: true
  PROJECT_NAME:
    required: true
  ENVIRONMENT:
    required: true
  GLOBAL_ENV_VARS_JSON:
    required: true
  ENVIRONMENTS:
    required: true
  aws_access_key_id:
    required: true
  aws_secret_access_key:
    required: true
  s3_bucket_name:
    required: true
  # INPUT EXISTENTE: Para controlar a cria√ß√£o da SQS
  create_sqs_queue:
    description: "Define se a fila SQS deve ser criada (true/false)."
    required: true
    type: string
    default: "true"

  # MODIFICADO: Input agora √© o NOME da fila SQS existente
  use_existing_sqs_trigger:
    description: "Define se uma fila SQS existente ser√° usada como trigger para a Lambda."
    required: true
    type: string
    default: "false"

  # MODIFICADO: Input agora √© o NOME da fila SQS existente, n√£o o ARN
  existing_sqs_queue_name:
    description: "O NOME da fila SQS existente a ser usada como trigger (requer use_existing_sqs_trigger=true)."
    required: false # Requerido apenas se use_existing_sqs_trigger for true
    type: string
    default: "" # Valor padr√£o vazio

runs:
  using: "composite"
  steps:
    # üìä Verificar o sucesso no recebimento das vari√°veis 
    - name: Debug vari√°veis de entrada na Generate tfvars
      shell: bash
      run: |
        echo "project_name=${{ inputs.PROJECT_NAME }}"
        echo "environment=${{ inputs.ENVIRONMENT }}"
        echo "s3_bucket_name=${{ inputs.s3_bucket_name }}"
        echo "aws_region=${{ inputs.AWS_REGION }}"
        echo "create_sqs_queue=${{ inputs.create_sqs_queue }}" 
        echo "use_existing_sqs_trigger=${{ inputs.use_existing_sqs_trigger }}"
        echo "existing_sqs_queue_name=${{ inputs.existing_sqs_queue_name }}" # MODIFICADO
        echo "---"

    # üßæ Gerando arquivo de vari√°veis terraform
    - name: Gerar arquivo terraform.auto.tfvars.json
      shell: bash
      run: |
        set -e
        echo "Gerando terraform.auto.tfvars.json..."

        if ! command -v jq &> /dev/null
        then
            echo "jq n√£o encontrado. Instalando..."
            sudo apt-get update && sudo apt-get install -y jq
        fi

        echo "jq version: $(jq --version)"

        mkdir -p terraform/

        # PREPARAR ENVS PARA JQ
        environments_json_literal=$(printf '%s' "${{ inputs.ENVIRONMENTS }}" | jq -sRr '.')
        global_env_vars_json_literal=$(printf '%s' "${{ inputs.GLOBAL_ENV_VARS_JSON }}" | jq -sRr '.')

        json_content=$(jq -n \
          --arg environments_str "$environments_json_literal" \
          --arg global_env_vars_json_str "$global_env_vars_json_literal" \
          --arg s3_bucket_name_val "${{ inputs.s3_bucket_name }}" \
          --arg aws_region_val "${{ inputs.AWS_REGION }}" \
          --arg project_name_val "${{ inputs.PROJECT_NAME }}" \
          --arg environment_val "${{ inputs.ENVIRONMENT }}" \
          --arg create_sqs_queue_str "${{ inputs.create_sqs_queue }}" \
          --arg use_existing_sqs_trigger_str "${{ inputs.use_existing_sqs_trigger }}" \
          --arg existing_sqs_queue_name_val "${{ inputs.existing_sqs_queue_name }}" \
          '{
            environments: ($environments_str | fromjson),
            global_env_vars: ($global_env_vars_json_str | fromjson),
            s3_bucket_name: $s3_bucket_name_val,
            aws_region: $aws_region_val,
            project_name: $project_name_val,
            environment: $environment_val,
            create_sqs_queue: ($create_sqs_queue_str | if . == "true" then true else false end),
            use_existing_sqs_trigger: ($use_existing_sqs_trigger_str | if . == "true" then true else false end),
            existing_sqs_queue_name: $existing_sqs_queue_name_val # MODIFICADO
          }')

        echo "$json_content" > terraform/terraform.auto.tfvars.json

        echo "‚úÖ terraform.auto.tfvars.json gerado com sucesso!"
      env: 
        # Mant√©m as vari√°veis de ambiente necess√°rias para o jq (inputs referenciados como $ENV.VAR)
        AWS_REGION: ${{ inputs.AWS_REGION }}
        PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        ENVIRONMENTS_JSON: ${{ inputs.ENVIRONMENTS }} 
        GLOBAL_ENV_VARS_JSON: ${{ inputs.GLOBAL_ENV_VARS_JSON }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        S3_BUCKET_NAME: ${{ inputs.s3_bucket_name }}
        CREATE_SQS_QUEUE: ${{ inputs.create_sqs_queue }}
        USE_EXISTING_SQS_TRIGGER: ${{ inputs.use_existing_sqs_trigger }}
        EXISTING_SQS_QUEUE_NAME: ${{ inputs.existing_sqs_queue_name }} # MODIFICADO

    # üïµÔ∏è‚Äç‚ôÄÔ∏è Debug do arquivo gerado
    - name: Debug - Conte√∫do de terraform.auto.tfvars.json (AP√ìS GERA√á√ÉO)
      shell: bash
      run: |
        echo "üìÑ Conte√∫do final de terraform/terraform.auto.tfvars.json:"
        cat terraform/terraform.auto.tfvars.json || echo "‚ùå terraform.auto.tfvars.json n√£o encontrado."
        echo "---"

    # üóÇÔ∏è Validando acesso ao reposit√≥rio na AWS
    - name: Verificar acesso ao bucket S3
      shell: bash
      run: aws s3 ls s3://${{ inputs.s3_bucket_name }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

    # üõ°Ô∏è Validando credenciais de acesso a AWS
    - name: Validar credenciais AWS (STS)
      shell: bash
      run: aws sts get-caller-identity
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

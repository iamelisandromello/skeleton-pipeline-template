# 📄 generate-tvars.yml
# Action: Gera arquivo terraform.auto.tfvars.json com base em variáveis dinâmicas e segredos
# Objetivo: Gera arquivo terraform.auto.tfvars.json com base em variáveis dinâmicas e segredos
name: 'Generate tfvars'
description: 'Gera arquivo terraform.auto.tfvars.json com base em variáveis dinâmicas e segredos'

inputs:
  AWS_REGION:
    required: true
  PROJECT_NAME:
    required: true
  ENVIRONMENT:
    required: true
  GLOBAL_ENV_VARS_JSON:
    required: true
  ENVIRONMENTS:
    required: true
  aws_access_key_id:
    required: true
  aws_secret_access_key:
    required: true
  s3_bucket_name:
    required: true
  # NOVO INPUT: Para controlar a criação da SQS
  create_sqs_queue:
    description: "Define se a fila SQS deve ser criada (true/false)."
    required: true
    type: string # Receberá "true" ou "false" como string
    default: "true" # Mantém o comportamento padrão de criar se não for explicitamente definido

runs:
  using: "composite"
  steps:
    # 📊 Verificar o sucesso no recebimento das variáveis 
    - name: Debug variáveis de entrada na Generate tfvars
      shell: bash
      run: |
        echo "project_name=${{ inputs.PROJECT_NAME }}"
        echo "environment=${{ inputs.ENVIRONMENT }}"
        echo "s3_bucket_name=${{ inputs.s3_bucket_name }}"
        echo "aws_region=${{ inputs.AWS_REGION }}"
        echo "create_sqs_queue=${{ inputs.create_sqs_queue }}" 
        echo "---"

    # 🧾 Gerando arquivo de variáveis terraform
    - name: Gerar arquivo terraform.auto.tfvars.json
      shell: bash
      run: |
        set -e
        echo "Gerando terraform.auto.tfvars.json..."

        # Instala jq se não estiver presente (geralmente já está em runners ubuntu-latest)
        if ! command -v jq &> /dev/null
        then
            echo "jq não encontrado. Instalando..."
            sudo apt-get update && sudo apt-get install -y jq
        fi

        # Debug jq version para fins de diagnóstico futuro
        echo "jq version: $(jq --version)"

        # Garante que o diretório 'terraform' exista antes de tentar escrever o arquivo
        mkdir -p terraform/

        # Estratégia de Arquivos Temporários:
        # Escreve o conteúdo JSON bruto dos inputs para arquivos temporários.
        # Isso é a maneira mais robusta de garantir que jq leia o JSON corretamente,
        # independentemente de como o GitHub Actions expande variáveis multi-linha.
        
        # O GitHub Actions já remove as aspas dos secrets JSONs automaticamente quando passados como inputs,
        # então escrevemos o conteúdo como está.
        echo "${{ inputs.ENVIRONMENTS }}" > environments_input_temp.json
        echo "${{ inputs.GLOBAL_ENV_VARS_JSON }}" > global_env_vars_input_temp.json
        
        # Debug dos arquivos temporários para verificar o conteúdo
        echo "--- Debug environments_input_temp.json ---"
        cat environments_input_temp.json
        echo "--- Debug global_env_vars_input_temp.json ---"
        cat global_env_vars_input_temp.json
        echo "---"

        # Lê o conteúdo dos arquivos temporários para variáveis do shell.
        # Isso garante que mesmo JSONs multi-linha sejam tratados como uma única string.
        ENVIRONMENTS_CONTENT=$(cat environments_input_temp.json)
        GLOBAL_ENV_VARS_CONTENT=$(cat global_env_vars_input_temp.json)

        # Determina o valor booleano para create_sqs_queue
        CREATE_SQS_QUEUE_BOOL=$(if [ "${{ inputs.create_sqs_queue }}" == "true" ]; then echo "true"; else echo "false"; fi)

        # Constrói o JSON final usando printf para evitar problemas de expansão
        # e garantir que os JSONs complexos sejam inseridos como literais.
        # O '%s' em printf é seguro para inserir o conteúdo bruto dos JSONs lidos dos arquivos.
        # O 'create_sqs_queue' é inserido como "true" ou "false" booleano.
        printf -v tfvars_raw_json '{
  "aws_region": "%s",
  "project_name": "%s",
  "environment": "%s",
  "s3_bucket_name": "%s",
  "global_env_vars": %s,
  "environments": %s,
  "create_sqs_queue": %s
}' \
"${{ inputs.AWS_REGION }}" \
"${{ inputs.PROJECT_NAME }}" \
"${{ inputs.ENVIRONMENT }}" \
"${{ inputs.s3_bucket_name }}" \
"$GLOBAL_ENV_VARS_CONTENT" \
"$ENVIRONMENTS_CONTENT" \
"$CREATE_SQS_QUEUE_BOOL"

        # Debug da string JSON bruta antes de passar para o jq
        echo "--- Debug: JSON Bruto Construído ---"
        echo "$tfvars_raw_json"
        echo "---"

        # Finalmente, usa jq para formatar (pretty-print) e validar o JSON.
        # Se houver um erro de sintaxe aqui, jq irá falhar e o erro será claro.
        final_json=$(echo "$tfvars_raw_json" | jq '.')

        # Verifica se o jq conseguiu processar o JSON (ou seja, se a sintaxe estava correta)
        if [ $? -ne 0 ]; then
            echo "❌ Erro: O JSON construído está malformado. Verifique os valores das secrets."
            echo "Conteúdo JSON malformado:"
            echo "$tfvars_raw_json"
            exit 1
        fi

        echo "$final_json" > terraform/terraform.auto.tfvars.json

        # Limpa os arquivos temporários
        rm environments_input_temp.json global_env_vars_input_temp.json

        echo "✅ terraform.auto.tfvars.json gerado com sucesso!"
    
    # 🕵️‍♀️ Debug do arquivo gerado
    - name: Debug - Conteúdo de terraform.auto.tfvars.json (APÓS GERAÇÃO)
      shell: bash
      run: |
        echo "📄 Conteúdo final de terraform/terraform.auto.tfvars.json:"
        cat terraform/terraform.auto.tfvars.json || echo "❌ terraform.auto.tfvars.json não encontrado."
        echo "---"

    # 🗂️ Validando acesso ao repositório na AWS
    - name: Verificar acesso ao bucket S3
      shell: bash
      run: aws s3 ls s3://${{ inputs.s3_bucket_name }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

    # 🛡️ Validando credenciais de acesso a AWS
    - name: Validar credenciais AWS (STS)
      shell: bash
      run: aws sts get-caller-identity
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

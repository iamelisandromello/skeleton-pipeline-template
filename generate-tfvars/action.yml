# üìÑ generate-tvars.yml
# Action: Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos
# Objetivo: Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos
name: 'Generate tfvars'
description: 'Gera arquivo terraform.auto.tfvars.json com base em vari√°veis din√¢micas e segredos'

inputs:
  AWS_REGION:
    required: true
  PROJECT_NAME:
    required: true
  ENVIRONMENT:
    required: true
  GLOBAL_ENV_VARS_JSON:
    required: true
  ENVIRONMENTS:
    required: true
  aws_access_key_id:
    required: true
  aws_secret_access_key:
    required: true
  s3_bucket_name:
    required: true
  # NOVO INPUT: Para controlar a cria√ß√£o da SQS
  create_sqs_queue:
    description: "Define se a fila SQS deve ser criada (true/false)."
    required: true
    type: string # Receber√° "true" ou "false" como string
    default: "true" # Mant√©m o comportamento padr√£o de criar se n√£o for explicitamente definido

runs:
  using: "composite"
  steps:
    # üìä Verificar o sucesso no recebimento das vari√°veis 
    - name: Debug vari√°veis de entrada na Generate tfvars
      shell: bash
      run: |
        echo "project_name=${{ inputs.PROJECT_NAME }}"
        echo "environment=${{ inputs.ENVIRONMENT }}"
        echo "s3_bucket_name=${{ inputs.s3_bucket_name }}"
        echo "aws_region=${{ inputs.AWS_REGION }}"
        echo "create_sqs_queue=${{ inputs.create_sqs_queue }}" 
        echo "---"

    # üßæ Gerando arquivo de vari√°veis terraform
    - name: Gerar arquivo terraform.auto.tfvars.json
      shell: bash
      # O script shell agora √© auto-contido, com os inputs diretamente mapeados para vari√°veis de ambiente.
      # O 'jq' ler√° diretamente dessas vari√°veis de ambiente, evitando problemas de escaping complexos do shell.
      run: |
        set -e
        echo "Gerando terraform.auto.tfvars.json..."

        # Instala jq se n√£o estiver presente (geralmente j√° est√° em runners ubuntu-latest)
        if ! command -v jq &> /dev/null
        then
            echo "jq n√£o encontrado. Instalando..."
            sudo apt-get update && sudo apt-get install -y jq
        fi

        # Debug jq version para fins de diagn√≥stico futuro
        echo "jq version: $(jq --version)"

        # Garante que o diret√≥rio 'terraform' exista antes de tentar escrever o arquivo
        mkdir -p terraform/

        # Define o filtro JQ como uma string multi-linha.
        # JQ acessa as vari√°veis de ambiente usando $ENV.<VARNAME>
        # 'fromjson' √© crucial aqui, pois os valores dos secrets (ENVIRONMENTS_JSON, GLOBAL_ENV_VARS_JSON)
        # s√£o passados como strings brutas para as vari√°veis de ambiente.
        # A convers√£o de "true"/"false" para booleano √© feita diretamente no filtro.
        JQ_FILTER='
          {
            environments: ($ENV.ENVIRONMENTS_JSON | fromjson),
            global_env_vars: ($ENV.GLOBAL_ENV_VARS_JSON | fromjson),
            s3_bucket_name: $ENV.S3_BUCKET_NAME,
            aws_region: $ENV.AWS_REGION,
            project_name: $ENV.PROJECT_NAME,
            environment: $ENV.ENVIRONMENT,
            create_sqs_queue: ($ENV.CREATE_SQS_QUEUE | if . == "true" then true else false end)
          }
        '
        
        # Executa o jq. A entrada vazia `echo ""` √© para fornecer um stdin vazio
        # j√° que o jq usar√° as vari√°veis de ambiente.
        json_content=$(echo "" | jq -n "$JQ_FILTER")

        # Debug: Imprime o resultado do jq antes de escrever no arquivo
        echo "--- DEBUG: Conte√∫do da vari√°vel json_content antes de escrever ---"
        echo "$json_content"
        echo "------------------------------------------"

        echo "$json_content" > terraform/terraform.auto.tfvars.json

        echo "‚úÖ terraform.auto.tfvars.json gerado com sucesso!"
      # Passa todos os inputs da Action como vari√°veis de ambiente para o contexto shell deste passo 'run'.
      # √â assim que o 'jq' os acessar√° usando a sintaxe '$ENV.<VARNAME>'.
      env: 
        AWS_REGION: ${{ inputs.AWS_REGION }}
        PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        # NOTA: O nome da vari√°vel de ambiente aqui deve ser exatamente como referenciado no filtro JQ ($ENV.NOME_DA_VARIAVEL).
        ENVIRONMENTS_JSON: ${{ inputs.ENVIRONMENTS }} 
        GLOBAL_ENV_VARS_JSON: ${{ inputs.GLOBAL_ENV_VARS_JSON }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        S3_BUCKET_NAME: ${{ inputs.s3_bucket_name }}
        # CREATE_SQS_QUEUE √© passado como a string "true" ou "false"
        CREATE_SQS_QUEUE: ${{ inputs.create_sqs_queue }} 

    # üïµÔ∏è‚Äç‚ôÄÔ∏è Debug do arquivo gerado
    - name: Debug - Conte√∫do de terraform.auto.tfvars.json (AP√ìS GERA√á√ÉO)
      shell: bash
      run: |
        echo "üìÑ Conte√∫do final de terraform/terraform.auto.tfvars.json:"
        cat terraform/terraform.auto.tfvars.json || echo "‚ùå terraform.auto.tfvars.json n√£o encontrado."
        echo "---"

    # üóÇÔ∏è Validando acesso ao reposit√≥rio na AWS
    - name: Verificar acesso ao bucket S3
      shell: bash
      run: aws s3 ls s3://${{ inputs.s3_bucket_name }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

    # üõ°Ô∏è Validando credenciais de acesso a AWS
    - name: Validar credenciais AWS (STS)
      shell: bash
      run: aws sts get-caller-identity
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.AWS_REGION }}
